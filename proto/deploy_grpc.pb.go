// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package deploy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeployClient is the client API for Deploy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeployClient interface {
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error)
	List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error)
	Details(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Deploy_UploadClient, error)
	Logs(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Logs, error)
}

type deployClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployClient(cc grpc.ClientConnInterface) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/deploy.Deploy/deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) List(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/deploy.Deploy/list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/deploy.Deploy/stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Details(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DeployResponse, error) {
	out := new(DeployResponse)
	err := c.cc.Invoke(ctx, "/deploy.Deploy/details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Deploy_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Deploy_ServiceDesc.Streams[0], "/deploy.Deploy/upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployUploadClient{stream}
	return x, nil
}

type Deploy_UploadClient interface {
	Send(*File) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type deployUploadClient struct {
	grpc.ClientStream
}

func (x *deployUploadClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *deployUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployClient) Logs(ctx context.Context, in *Function, opts ...grpc.CallOption) (*Logs, error) {
	out := new(Logs)
	err := c.cc.Invoke(ctx, "/deploy.Deploy/logs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeployServer is the server API for Deploy service.
// All implementations must embed UnimplementedDeployServer
// for forward compatibility
type DeployServer interface {
	Deploy(context.Context, *DeployRequest) (*DeployResponse, error)
	List(context.Context, *Empty) (*DeployResponse, error)
	Stop(context.Context, *Empty) (*DeployResponse, error)
	Details(context.Context, *Empty) (*DeployResponse, error)
	Upload(Deploy_UploadServer) error
	Logs(context.Context, *Function) (*Logs, error)
}

// UnimplementedDeployServer must be embedded to have forward compatible implementations.
type UnimplementedDeployServer struct {
}

func (UnimplementedDeployServer) Deploy(context.Context, *DeployRequest) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedDeployServer) List(context.Context, *Empty) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDeployServer) Stop(context.Context, *Empty) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDeployServer) Details(context.Context, *Empty) (*DeployResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedDeployServer) Upload(Deploy_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDeployServer) Logs(context.Context, *Function) (*Logs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedDeployServer) mustEmbedUnimplementedDeployServer() {}

// UnsafeDeployServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeployServer will
// result in compilation errors.
type UnsafeDeployServer interface {
	mustEmbedUnimplementedDeployServer()
}

func RegisterDeployServer(s grpc.ServiceRegistrar, srv DeployServer) {
	s.RegisterService(&Deploy_ServiceDesc, srv)
}

func _Deploy_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/list",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).List(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Details(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeployServer).Upload(&deployUploadServer{stream})
}

type Deploy_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*File, error)
	grpc.ServerStream
}

type deployUploadServer struct {
	grpc.ServerStream
}

func (x *deployUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *deployUploadServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Deploy_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Function)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/logs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Logs(ctx, req.(*Function))
	}
	return interceptor(ctx, in, info, handler)
}

// Deploy_ServiceDesc is the grpc.ServiceDesc for Deploy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deploy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deploy",
			Handler:    _Deploy_Deploy_Handler,
		},
		{
			MethodName: "list",
			Handler:    _Deploy_List_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Deploy_Stop_Handler,
		},
		{
			MethodName: "details",
			Handler:    _Deploy_Details_Handler,
		},
		{
			MethodName: "logs",
			Handler:    _Deploy_Logs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "upload",
			Handler:       _Deploy_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "deploy.proto",
}
